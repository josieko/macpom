/* ---------------------------------
SCSS variables
--------------------------------- */
$white: #b17171;
$pink: #c4718e;
$pink-light: #8b5372;
$blue: #1c883a;
$blue-dark: #ffa8a8;

/* ---------------------------------
SCSS function
--------------------------------- */
@function rem($pixel) {
  @return $pixel / 16 + rem;
}
@import url("https://fonts.googleapis.com/css?family=Montserrat&display=swap");

/* ---------------------------------
Default Styles
--------------------------------- */
*,
*::before,
*::after {
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
  font-family: "Montserrat", sans-serif;
  font-size: 16px;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  display: grid;
  align-content: center;
  height: 100vh;
  margin: 0;
  padding: 0;
}

button {
  outline: none;
}

::-webkit-input-placeholder {
  font-size: 1px;
  font-style: italic;
  font-weight: bold;
  color: $pink;

  .onBreakingMode & {
    color: $blue;
  }
}

::-moz-placeholder {
  font-size: 1px;
  font-style: italic;
  font-weight: bold;
  color: $pink;

  .onBreakingMode & {
    color: $blue;
  }
}

.container {
  display: flex;
  flex-direction: column;
  max-width: 1280px;
  width: 100%;
  height: 90vh;
  margin: auto;
}

.left {
  display: flex;
  align-content: center;
  background-color: $pink-light;
}

.left__wrapper {
  width: 65%;
}

.right {
  background-color: $blue-dark;
}

.right__heading {
  display: flex;
  flex-direction: row;
  justify-content: center;
  font-size: 24px;
  color: $white;
}

/* ---------------------------------
Component AddTask
--------------------------------- */
.add-task {
  position: relative;
}

.add-task__input {
  width: 100%;
  border: none;
  font-size: 22px;
  color: $blue-dark;
  border-radius: 12px;
  font-family: "Montserrat", sans-serif;
}

.add-task__submit {
  position: absolute;
  top: 50%;
  right: 20px;
  transform: translateY(-50%);
  padding: 10px;
  font-size: 20px;
  font-weight: bold;
  color: $pink;
  border: 0;
  background: none;
  cursor: pointer;

  .onBreakingMode & {
    color: $blue;
  }
}

/* ---------------------------------
Component CurrentTask
--------------------------------- */
.current-task {
  margin-top: 80px;
}

.current-task__checkbox {
  label {
    position: relative;
    padding: 0;
    cursor: pointer;

    &::before {
      content: "";
      display: inline-block;
      width: 48px;
      height: 48px;
      background-color: transparent;
      border: 2px solid $blue-dark;
      border-radius: 50%;
    }
  }

  input[type="checkbox"] {
    position: absolute;
    opacity: 0;

    &:checked + label::after {
      content: "";
      position: absolute;
      top: -11px;
      left: 14px;
      width: 5px;
      height: 5px;
      background-color: $blue-dark;
      box-shadow: 5px 0 0 $blue-dark, 7px 0 0 $blue-dark, 7px -5px 0 $blue-dark,
        7px -7px 0 $blue-dark, 7px -9px 0 $blue-dark, 7px -14px 0 $blue-dark;
      transform: rotate(45deg);
    }
  }
}

.current-task__head {
  display: grid;
  grid-column-gap: 1rem;
  grid-template-columns: repeat(2, auto);
  justify-content: start;
  align-items: center;
}

.current-task__name {
  margin: 0;
  font-size: 28px;

  .is-completed & {
    text-decoration: line-through;
  }
}

.current-task__countdown {
  background: none;
  line-height: 1;
  font-size: 13.5vw;
  color: $pink;

  .onBreakingMode & {
    color: $blue;
  }

  @media screen and (min-width: 1400px) {
    font-size: 196px;
  }
}

.current-task__tomatos {
  margin-top: 3px;
}

.current-task__tomato {
  max-width: 18px;
  margin-right: 3px;
}

/* ---------------------------------
Component Timer
--------------------------------- */
.timer {
  transform: translateY(2%);
  width: 222px;
  height: 88px;
  padding-bottom: 20px;
}

.timer__outlines {
  position: absolute;

  border: 2px solid $pink;

  .onBreakingMode & {
    border-color: $blue;
  }
}

.timer__track-outline {
  fill: $pink;

  .isPlaying & {
    fill: $white;
  }

  .onBreakingMode & {
    fill: $blue;
  }

  .onBreakingMode.isPlaying & {
    fill: $white;
  }
}

.timer__moving-outline {
  fill: none;
  transform: rotate(-90deg);
}

.timer__reset {
  position: absolute;
  top: 60%;
  left: 70%;
  width: 4.5%;
  height: 4.5%;
}

.timer__reset-btn {
  width: 100%;
  height: 100%;
  transform: rotate(0);
  background-color: $white;
  border: none;
  transition: transform 0.3s;
  cursor: pointer;

  &:hover {
    transform: rotate(720deg);
  }
}

.timer__control-btns {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 25%;
  height: 25%;
}

/* ---------------------------------
Component TimerButtons
--------------------------------- */
.timer__play-btn,
.timer__pause-btn {
  width: 100%;
  height: 100%;
  transform: scale(1);
  border: none;
  border-radius: 50%;
  cursor: pointer;

  svg {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
  }
}

.timer__play-btn {
  animation: heartBeat 3s ease-in-out infinite;
}

@keyframes heartBeat {
  0% {
    transform: scale(1);
  }

  7% {
    transform: scale(1.1);
  }

  14% {
    transform: scale(1);
  }

  21% {
    transform: scale(1.1);
  }

  35% {
    transform: scale(1);
  }
}
